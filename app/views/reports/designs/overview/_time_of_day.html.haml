- missing_responses = responses.select(&:blank?)
- valid_responses = responses.reject(&:blank?).map(&:to_i).sort
- valid_sheets = sheet_scope.filter_variable(variable, current_user, "present")
- no_responses = valid_responses.count.zero?

- categories = []
- category_urls = []
- data = []
- thirty_minutes = 1800
- (0..47).each do |increment|
  - from_time = increment * thirty_minutes
  - to_time = from_time + thirty_minutes - 1
  - filter_to_time = from_time + thirty_minutes
  - time_f = parse_time_of_day(from_time)
  - time_t = parse_time_of_day(to_time)
  - time_search_end = parse_time_of_day(from_time + thirty_minutes)
  -# TODO: Needs refactoring to time of day object (class)
  - if variable.twelve_hour_clock?
    - long_name = "#{time_f[:hours]}#{format(":%02d", time_f[:minutes])}#{time_f[:period]} to #{time_t[:hours]}#{format(":%02d", time_t[:minutes])}#{time_t[:period]}"
    - categories << (time_f[:minutes].zero? ? "#{time_f[:hours]}#{format(":%02d", time_f[:minutes])}#{time_f[:period] if increment.in?([0,24,46])}" : "")
    - start_time = "#{variable.name}:>=#{time_f[:hours]}#{format(":%02d", time_f[:minutes])}#{time_f[:period]} "
    - if time_search_end
      - end_time = "#{variable.name}:<#{time_search_end[:hours]}#{format(":%02d", time_search_end[:minutes])}#{time_t[:period]}"
    - else
      - end_time = "#{variable.name}:<=#{time_t[:hours]}#{format(":%02d", time_t[:minutes])}#{format(":%02d", time_t[:seconds])}#{time_t[:period]}"
  - else
    - long_name = "#{format("%02d", time_f[:hours_24])}#{format(":%02d", time_f[:minutes])}#{time_f[:period]} to #{format("%02d", time_t[:hours_24])}#{format(":%02d", time_t[:minutes])}#{time_t[:period]}"
    - categories << (time_f[:minutes].zero? ? "#{format("%02d", time_f[:hours_24])}#{format(":%02d", time_f[:minutes])}" : "")
    - start_time = "#{variable.name}:>=#{format("%02d", time_f[:hours_24])}#{format(":%02d", time_f[:minutes])} "
    - if time_search_end
      - end_time = "#{variable.name}:<#{format("%02d", time_search_end[:hours_24])}#{format(":%02d", time_search_end[:minutes])}"
    - else
      - end_time = "#{variable.name}:<=#{format("%02d", time_t[:hours_24])}#{format(":%02d", time_t[:minutes])}#{format(":%02d", time_t[:seconds])}"

  - search = "#{"events:#{event_id} " if event_id.present?}#{start_time}#{end_time}"
  - url = project_sheets_path(design_id: @design.id, search: search)
  - count = valid_responses.count { |r| r.in?(from_time..to_time) }
  - category_urls << { url: url, count: count }
  - data << { y: count, name: long_name, url: url }

- series = [{ data: data, showInLegend: false, name: "Count" }]

- unless no_responses
  %div{ data: { object: "draw-chart", series: series.to_json, categories: categories.to_json, category_urls: category_urls.to_json, yaxis: "# of Sheets", chart_type: "column" } }

%table.table.table-fixed.table-borderless
  %thead
    %tr
      %th.text-center N
      %th.text-center Mean
      %th.text-center.d-none.d-sm-table-cell StdDev
      %th.text-center Med
      %th.text-center Min
      %th.text-center Max
      %th.text-center.d-none.d-sm-table-cell.text-muted Missing
      %th.text-center Total
  %tbody
    %tr
      %td.text-center= filter_link Statistics.array_count(valid_responses), @design, variable, ":present", event_id: event_id
      %td.text-center
        - mean = Sheet.array_calculation(valid_sheets, variable, "array_mean")
        - if mean
          - time_of_day_mean = parse_time_of_day(mean.to_i)
          - if variable.twelve_hour_clock?
            = "#{time_of_day_mean[:hours]}#{format(":%02d", time_of_day_mean[:minutes])}#{format(":%02d", time_of_day_mean[:seconds]) if variable.show_seconds?}#{time_of_day_mean[:period]}"
          - else
            = "#{format("%02d", time_of_day_mean[:hours_24])}#{format(":%02d", time_of_day_mean[:minutes])}#{format(":%02d", time_of_day_mean[:seconds]) if variable.show_seconds?}"
        - else
          \-
      %td.text-center.d-none.d-sm-table-cell.nowrap
        - stdev = Sheet.array_calculation(valid_sheets, variable, "array_standard_deviation")
        - if stdev
          - time_duration = parse_time_duration(stdev.to_i)
          &plusmn;
          = "#{"#{time_duration[:hours]}h " unless time_duration[:hours].zero?}#{time_duration[:minutes]}m #{"#{time_duration[:seconds]}s" if variable.show_seconds?}"
        - else
          \-
      %td.text-center
        - seconds = Sheet.array_calculation(valid_sheets, variable, "array_median")
        = render "reports/designs/overview/links/time_of_day_link", design: @design, variable: variable, seconds: seconds, event_id: event_id
      %td.text-center
        - seconds = Sheet.array_calculation(valid_sheets, variable, "array_min")
        = render "reports/designs/overview/links/time_of_day_link", design: @design, variable: variable, seconds: seconds, event_id: event_id
      %td.text-center
        - seconds = Sheet.array_calculation(valid_sheets, variable, "array_max")
        = render "reports/designs/overview/links/time_of_day_link", design: @design, variable: variable, seconds: seconds, event_id: event_id
      %td.text-center.d-none.d-sm-table-cell= filter_link Statistics.array_count(missing_responses), @design, variable, ":missing", event_id: event_id
      %td.text-center= filter_link Statistics.array_count(responses), @design, nil, nil, event_id: event_id
