- missing_codes = variable.missing_codes
- blank_responses = responses.select(&:blank?)
- missing_responses = responses.select{ |r| r.blank? || missing_codes.include?(r) }
- valid_responses = responses.reject{ |r| r.blank? || missing_codes.include?(r) }.map(&:to_i)
- counts = []
- variable.options_without_missing.collect { |opt| [opt[:name], opt[:value]] }.each do |name, value|
  - count = responses.select { |r| r == value }.count
  - counts << count if count > 0
- no_responses = (counts.count == 0)

- unless no_responses
  .center{ style: 'display: none;font-size: 48px;margin-bottom: 20px;', data: { object: 'sparkline', type: 'pie', values: counts } }
.row.col-buffer
  .col-xs-6.text-right
    %strong N
  .col-xs-6
    = filter_link Sheet.array_count(valid_responses), @design, variable, ':any'
    - unless no_responses
      %small.text-muted (100%)

- count_index = -1
- variable.options_missing_at_end.collect { |opt| [opt[:name], opt[:value], opt[:missing_code]] }.each do |name, value, missing_code|
  - count = responses.select { |r| r == value }.count
  - if count > 0 || no_responses
    - count_index += 1
    .row.col-buffer
      .col-xs-6.text-right{ class: missing_code == '1' ? 'text-muted' : nil }
        %strong= "#{value}: #{name}"
      .col-xs-6
        - unless missing_code == '1'
          %span{ style: "background-color: #{@colors[count_index % @colors.size]}" } &nbsp;
        = filter_link(count == 0 ? nil : count, @design, variable, value)
        - if valid_responses.count != 0 && missing_code != '1'
          - percent = count * 100 / valid_responses.count
          %small.text-muted= "(#{percent}%)"

.row.col-buffer
  .col-xs-6.text-right
    %strong.text-muted Blank
  .col-xs-6
    = filter_link Sheet.array_count(blank_responses), @design, variable, ':blank'

.row.col-buffer
  .col-xs-6.text-right
    %strong Total
  .col-xs-6
    = filter_link Sheet.array_count(responses), @design, nil, nil
