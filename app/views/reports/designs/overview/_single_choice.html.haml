- missing_responses = responses.select(&:blank?)
- valid_responses = responses.reject(&:blank?).map(&:to_i)
- counts = []
- variable.options_missing_at_end.collect { |opt| [opt[:name], opt[:value]] }.each do |name, value|
  - count = responses.select { |r| r == value }.count
  - counts << count if responses.select { |r| r == value }.count > 0


- if variable.options_missing_at_end.count > 5

  .center
    %span{ style: 'display:none;font-size:48px;', data: { object: 'sparkline', type: 'pie', values: counts } }
  .row.col-buffer
    .col-sm-3
      %strong N
    .col-sm-9
      = filter_link Sheet.array_count(valid_responses), @design, variable, ':any'

  - count_index = -1
  - variable.options_missing_at_end.collect { |opt| [opt[:name], opt[:value]] }.each do |name, value|
    - unless responses.select { |r| r == value }.count == 0
      - count_index += 1
      .row.col-buffer
        .col-sm-3
          %strong= "#{value}: #{name}"
        .col-sm-9
          = filter_link((responses.select { |r| r == value }.count == 0 ? nil : responses.select { |r| r == value }.count), @design, variable, value)
          %span{ style: "background-color: #{@colors[count_index % @colors.size]}" } &nbsp;

  .row.col-buffer
    .col-sm-3
      %strong.text-muted Unknown
    .col-sm-9
      = filter_link Sheet.array_count(missing_responses), @design, variable, ':missing'

  .row.col-buffer
    .col-sm-3
      %strong Total
    .col-sm-9
      = filter_link Sheet.array_count(responses), @design, nil, nil

- else
  %table.table
    %thead
      %tr
        %th
        %th N
        - variable.options_missing_at_end.collect { |opt| [opt[:name], opt[:value]] }.each do |name, value|
          %th
            = "#{value}: #{name}"
        %th.text-muted Unknown
        %th Total
    %tbody
      %tr
        %td
          %span{ style: 'display:none', data: { object: 'sparkline', type: 'pie', values: counts } }
        %td= filter_link Sheet.array_count(valid_responses), @design, variable, ':any'
        - variable.options_missing_at_end.collect { |opt| [opt[:name], opt[:value]] }.each_with_index do |(name, value), count_index|
          %td
            - unless responses.select { |r| r == value }.count == 0
              %span{ style: "background-color: #{@colors[count_index % @colors.size]}" } &nbsp;
            = filter_link((responses.select { |r| r == value }.count == 0 ? nil : responses.select { |r| r == value }.count), @design, variable, value)
        %td= filter_link Sheet.array_count(missing_responses), @design, variable, ':missing'
        %td= filter_link Sheet.array_count(responses), @design, nil, nil
