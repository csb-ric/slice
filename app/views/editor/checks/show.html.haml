- @title = @check.name
- @menu_title = "#{@project.name} #{@title}"

- content_for :container_class, "container-fluid"
- content_for :sidebar, render("projects/sidebar")

- content_for :header do
  .float-right
    = render "layouts/edit_delete_dropdown_lg", edit_url: edit_editor_project_check_path(@project, @check), delete_url: editor_project_check_path(@project, @check), delete_confirmation: "Delete \"#{@check.name}\" check?"
  = @title

.dashboard-container
  = render "forms/horizontal/show/text", object: @check.user, key: :full_name, key_name: "Creator"
  = render "forms/horizontal/show/markdown", object: @check, key: :description if @check.description.present?
  = render "forms/horizontal/show/markdown", object: @check, key: :message if @check.message.present?
  = render "forms/horizontal/show/check_box", object: @check, key: :archived if @check.archived?
  = render "editor/checks/filters", check: @check

  - if @check.expression.present?
    - engine = ::Engine::Engine.new(@project, current_user)
    - engine.lexer.lexer(@check.expression)
    = render "forms/horizontal/show/generic", title: "Expression", content: render("engine/tokens", engine: engine)

- unless @check.archived?
  .dashboard-container
    .float-right.text-muted
      - if @check.last_run_at.present?
        Last run
        = @check.last_run_at.strftime("%a, %b %-d at %-l:%M %p.")
      - else
        Update requested.

    Checks are run hourly.
    = link_to "Request update.", request_run_editor_project_check_path(@project, @check), method: :post if @check.last_run_at.present?


  - sheets = current_user.all_viewable_sheets.where(id: @check.status_checks.where(failed: true).select(:sheet_id))
  - if sheets.present?
    .dashboard-container.dashboard-table
      %table.table.table-striped.table-borderless.table-hover
        %col{ width: "1px" }
        %thead
          %th Subject
          %th Sheets
          - @check.check_filters.each do |check_filter|
            %th.text-center
              %code= check_filter.name

        - sheets.includes(:subject, :design).order("subjects.subject_code").limit(40).group_by(&:subject).each do |subject, sheets|
          %tr
            %td= link_to subject.subject_code, [@project, subject]
            %td.nowrap
              - sheets.sort_by { |s| s.design.short_name }.each do |sheet|
                = link_to sheet.design.short_name, [sheet.project, sheet], class: "badge badge-light"
            - @check.check_filters.each do |check_filter|
              %td.text-center
                - if check_filter.filter_type == "randomized"
                  = simple_check true
                - elsif check_filter.variable
                  - sheet_variables = SheetVariable.where(sheet_id: sheets, variable: check_filter.variable)
                  - if sheet_variables.present?
                    %ul.list-unstyled
                      - sheet_variables.each do |sheet_variable|
                        %li= sheet_variable.get_response(:raw)
    - if @check.message.present? && !@check.archived?
      .center-horizontally
        .docs-learn-more
          Filter
          = succeed "." do
            = link_to "all sheets", project_sheets_path(@project, search: "checks:#{@check.slug}")

  - else
    .jumbotron.jumbotron-custom-text
      No invalid sheets found.

- if @check.expression.present?
  = hidden_field_tag :expressions, @check.expression, data: { object: "expressions-input", url: expressions_engine_project_path(@project, format: "js") }
  .engine-container
    .float-right
      #run-ms.d-inline.text-secondary.small{ style: "font-size: 1.5rem;font-weight: 300;" }
    #subjects-count.mb-3{ style: "font-size: 1.5rem;" }

    #sobjects-table
