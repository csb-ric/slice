- min_number_for_dropdown = 5
- url = invite.new_record? ? editor_project_invites_path(project) : editor_project_invite_path(project, invite)
- method = invite.new_record? ? :post : :patch
= form_with model: [project, invite], url: url, method: method, local: true do |form|
  = form.hidden_field :subgroup_type
  = form.hidden_field :subgroup_id
  - if invite.new_record?
    = render "forms/horizontal/email_field", form: form, object: invite, key: :email
  - else
    .form-group.row
      .col-md-2.col-form-label Email
      .col-md-10
        .form-control-plaintext= invite.email

  .form-group.row
    = label_tag "Role level", nil, class: "col-md-2 col-form-label"
    .col-md-10
      .btn-group.btn-group-toggle{ data: { toggle: "buttons" } }
        - role_levels = [["Project", "project"], ["Site", "site"]]
        - role_levels << ["AE Team", "ae_team"] if @project.ae_teams_enabled? && @project.unblinded?(current_user)
        - role_levels.each do |label, value|
          = form.label :role_level, value: value, class: "btn btn-primary#{" active" if invite.role_level == value}", data: { object: "role-level" } do
            = form.radio_button :role_level, value
            = label

  .form-group.row
    = label_tag "On", nil, class: "col-md-2 col-form-label"
    .col-md-10
      %div{ style: invite.role_level == "project" ? nil : "display: none", data: { roles: "project" } }
        = icon("fas", "dot-circle", class: "text-primary mr-1")
        = project.name

      %div{ style: invite.role_level == "site" ? nil : "display: none", data: { roles: "site" } }
        - if project.sites.count >= min_number_for_dropdown
          = form.select :site_id, project.sites.order_number_and_name_for_select, { selected: invite.subgroup_type == "Site" ? invite.subgroup_id : nil, include_blank: "Select Site" }, class: "custom-select#{" is-invalid" if invite.errors[:site].present?}", data: { object: "role-selection-dropdown", subgroup_type: "Site" }
        - else
          - project.sites.order_number_and_name.each do |site|
            .custom-control.custom-radio{ data: { object: "role-selection", subgroup_type: "Site" } }
              = form.radio_button :site_id, site.id, checked: (invite.subgroup_type == "Site" && invite.subgroup_id == site.id), class: "custom-control-input"
              = form.label :site_id, site.number_and_name, value: site.id, class: "custom-control-label"

        - if invite.errors[:site].present?
          %small.text-danger
            Site must be selected.

      - if @project.ae_teams_enabled? && @project.unblinded?(current_user)
        %div{ style: invite.role_level == "ae_team" ? nil : "display: none", data: { roles: "ae_team" } }
          - if project.ae_teams.size.zero?
            .form-control-plaintext.text-muted
              No
              = link_to "adverse event teams", editor_project_ae_teams_path(@project)
              have been setup.
          - elsif project.ae_teams.size >= min_number_for_dropdown
            = form.select :team_id, project.ae_teams.order(:name).pluck(:name, :id), { selected: invite.subgroup_type == "AeTeam" ? invite.subgroup_id : nil, include_blank: "Select Team" }, class: "custom-select#{" is-invalid" if invite.errors[:team].present?}", data: { object: "role-selection-dropdown", subgroup_type: "AeTeam" }
          - else
            - project.ae_teams.each do |team|
              .custom-control.custom-radio{ data: { object: "role-selection", subgroup_type: "AeTeam" } }
                = form.radio_button :team_id, team.id, checked: (invite.subgroup_type == "AeTeam" && invite.subgroup_id == team.id), class: "custom-control-input"
                = form.label :team_id, team.name, value: team.id, class: "custom-control-label"

          - if invite.errors[:team].present?
            %small.text-danger
              Team must be selected.

  .form-group.row
    = label_tag "Role", nil, class: "col-md-2 col-form-label"
    .col-md-10
      %div{ style: invite.role_level == "project" ? nil : "display: none", data: { roles: "project" } }
        - roles = Invite::PROJECT_ROLES.dup
        - roles.reject! { |h| h[:blinded] } unless @project.blinding_enabled?
        - roles.select! { |h| h[:blinded] } unless @project.unblinded?(current_user)
        - roles += Invite::AE_ADMIN_ROLES if @project.ae_teams_enabled? && @project.unblinded?(current_user)
        - roles.each do |hash|
          - name = @project.blinding_enabled? && @project.unblinded?(current_user) ? "#{hash[:name]}#{hash[:blinded] ? " - Blinded" : " - Unblinded" if hash[:adverse_events] == false}" : hash[:name]
          .custom-control.custom-radio
            = form.radio_button :role, hash[:role], class: "custom-control-input"
            = form.label :role, name, value: hash[:role], class: "custom-control-label"

      %div{ style: invite.role_level == "site" ? nil : "display: none", data: { roles: "site" } }
        - roles = Invite::SITE_ROLES.dup
        - roles.reject! { |h| h[:blinded] } unless @project.blinding_enabled?
        - roles.select! { |h| h[:blinded] } unless @project.unblinded?(current_user)
        - roles.each do |hash|
          - name = @project.blinding_enabled? && @project.unblinded?(current_user) ? "#{hash[:name]}#{hash[:blinded] ? " - Blinded" : " - Unblinded"}" : hash[:name]
          .custom-control.custom-radio
            = form.radio_button :role, hash[:role], class: "custom-control-input"
            = form.label :role, name, value: hash[:role], class: "custom-control-label"

      - if @project.ae_teams_enabled? && @project.unblinded?(current_user)
        %div{ style: invite.role_level == "ae_team" ? nil : "display: none", data: { roles: "ae_team" } }
          - Invite::AE_TEAM_ROLES.each do |hash|
            .custom-control.custom-radio
              = form.radio_button :role, hash[:role], class: "custom-control-input"
              = form.label :role, hash[:name], value: hash[:role], class: "custom-control-label"

      - if invite.errors[:role].present?
        %small.text-danger
          Role must be selected.

  = render "forms/horizontal/submit", form: form, object: invite, submit_text: invite.new_record? ? "Send invite" : "Update invite", cancel: invite.new_record? ? false : editor_project_invite_path(project, invite)

