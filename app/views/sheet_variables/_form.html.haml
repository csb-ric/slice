-# This file shows a variable for use in a sheet
- disabled = '' if defined?(disabled) == nil
- show_values = true unless defined?(show_values)


- sheet_variable = sheet_variables.select{ |sv| sv.variable_id == variable.id }.first
- response = (params[:variables].blank? ? (sheet_variable ? sheet_variable.get_response(:raw) : nil) : params[:variables][variable.id.to_s])

- value = variable.response_to_value(response)

- validate_response = if @sheet and (@sheet.errors.count > 0 or !@sheet.new_record?)
  - variable.validate_value(design, value)
- else
  - 'blank'

- form_class = cycle('variable-shade', 'variable-blind')
- case validate_response
- when 'error'
  - validation_class = 'variable-errors'
- when 'warning'
  - validation_class = 'variable-warnings'
- else
  - validation_class = ''

- hidden_class = (variable.variable_type == 'calculated' && variable.hide_calculation? ? 'calculation-hidden' : '')

.form-group{ class: "#{form_class} #{validation_class} #{hidden_class}", data: { object: 'design-option-container', required: (design_option ? design_option.required : nil), required_field: "variables[#{variable.id}]#{'[]' if variable.variable_type == 'checkbox'}", required_type: variable.variable_type, branching_logic: design.branching_logic(design_option) } }
  - if variable.uses_scale?
    -# Nothing
  - elsif %w(invisible gone).include?(variable.display_name_visibility)
    .col-xs-12
      %label
        = variable.display_name
        = render 'design_options/required', design_option: design_option
    %div{ style: "clear:both" }
  - else
    %label.col-md-3.control-label{ for: "variable_#{variable.id}" }
      = variable.display_name
      = render 'design_options/required', design_option: design_option

  - col_class = 'col-xs-12'
  - col_class = 'col-md-9' if variable.display_name_visibility != 'gone' && !variable.uses_scale?
  - col_offset = 'col-md-offset-3' if variable.display_name_visibility == 'invisible' && !variable.uses_scale?


  %div{ class: "#{col_class} #{col_offset}" }
    %div{ style: "line-height:30px", class: (form_class == 'variable-shade' ? 'shade-background' : 'blind-background') }
      - if Variable::TYPE.flatten.uniq.include?(variable.variable_type)
        = render "sheet_variables/form/#{variable.variable_type}", design: design, design_option: design_option, response: response, disabled: disabled, variable: variable, field_name: "variables[#{variable.id}]", show_values: show_values, object: sheet_variable, validate_response: validate_response
      - else
        = hidden_field_tag "variables[#{variable.id}]", nil, disabled: disabled
        Unsupported Variable Type
        = variable.variable_type
