= hidden_field_tag "design_option[position]", design_option.position
= hidden_field_tag "variable[variable_type]", variable.variable_type if variable.new_record?

.form-group.row
  %label.col-md-2.col-form-label Display Name
  .col-md-10
    .input-group
      = text_field_tag "variable[display_name]", variable.display_name, autocomplete: "off", class: "form-control", data: { object: (variable.new_record? ? "create-variable-name" : ""), variable_name_target: "#variable_name" }
      .input-group-append
        = link_to "#", class: "btn btn-info", data: { object: "toggle-visibility", target: "#display-name-info" }, tabindex: "-1" do
          %i.fa.fa-info-circle
        - if params[:locale].present?
          %span.input-group-text= params[:locale]
    = render "layouts/errors", object: variable, key: :display_name

    #display-name-info.card.border-info.bg-light.mt-3{ style: "display:none" }
      .card-body
        %p
          The display name is the question as displayed to the user who is
          filling out the form.
        %p
          Ex:
          %strong What is your age?

.form-group.row
  %label.col-md-2.col-form-label Name
  .col-md-10
    .input-group
      = text_field_tag "variable[name]", variable.name, maxlength: 32, class: "form-control"
      .input-group-append
        = link_to "#", class: "btn btn-info", data: { object: "toggle-visibility", target: "#name-info" }, tabindex: "-1" do
          %i.fa.fa-info-circle
    = render "layouts/errors", object: variable, key: :name
    #name-info.card.border-info.bg-light.mt-3{ style: "display: none;" }
      .card-header
        %strong Naming convention
      .card-body
        %ul
          %li
            Must be a letter
            %code a-zA-Z
            followed by letters
            = succeed "," do
              %code a-zA-Z
            numbers
            = succeed "," do
              %code 0-9
            or underscores
            = succeed "." do
              %code _
          %li
            Max length
            = succeed "." do
              %strong 32 characters
        Ex:
        %code var1_population

.form-group.row
  %label.col-md-2.col-form-label Field Note
  .col-md-10
    .input-group
      = text_field_tag "variable[field_note]", variable.field_note, class: "form-control"
      - if params[:locale].present?
        .input-group-append
          %span.input-group-text= params[:locale]

    = render "layouts/errors", object: variable, key: :field_note

- unless variable.new_record?
  .form-group.row
    %label.col-md-2.col-form-label
      Branching Logic
      = link_to "#", class: "btn btn-info btn-sm", data: { object: "toggle-visibility", target: "#branching-logic-info" }, tabindex: "-1" do
        %i.fa.fa-info-circle
    .col-md-10
      = text_area_tag "design_option[branching_logic]", design_option.readable_branching_logic, rows: 7, class: "form-control", data: { object: "calculation-variable-name-textcomplete", project_id: @project.id }
      = render "layouts/branching_logic_examples"

- if variable.new_record? && variable.variable_type == "grid"
  .form-group.row
    = label :questions, "Questions", class: "col-md-2 col-form-label"
    .col-md-10
      .form-control-text
        .card.border-info.bg-light
          .card-body
            %p
              Enter questions, and specify the response format. You may skip
              this step and add questions in the advanced editor in the next
              step. The advanced editor provides fine control over question
              responses.
            #questions
              - questions = (params[:variable] && params[:variable][:questions] ? params[:variable][:questions] : [ { question_name: "", question_type: "free text" } ])
              - questions.each do |question_hash|
                = render "variables/question", question_hash: question_hash
            = link_to "Add Question", add_question_project_variables_path(@project), method: :post, remote: true, class: "btn btn-sm btn-light", style: "margin-top:6px"
