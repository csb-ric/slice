- @title = 'Calendar'
- @menu_title = "#{@project.name} #{@title}"

= render 'projects/side_nav'


- @anchor_date = (Date.parse(params[:date]) rescue Time.zone.today)

- @anchor_date = @anchor_date.beginning_of_week(:sunday)

-# if current_user.calendar_view == '4week'
- move_forward = @anchor_date + 4.weeks
- move_backward = @anchor_date - 4.weeks
-# else
  -# move_forward = @anchor_date + 1.month
  -# move_backward = @anchor_date - 1.month


- content_for :header do
  .background-gradient
  .header-container
    .container
      .pull-right
        = succeed ' ' do
          = link_to calendar_project_path(@project, date: move_backward.strftime('%Y%m%d')), tabindex: '-1', class: 'btn btn-xs btn-default' do
            %span.glyphicon.glyphicon-chevron-left

        = succeed ' ' do
          = link_to calendar_project_path(@project), tabindex: '-1', class: 'btn btn-xs btn-default', disabled: (@anchor_date == Time.zone.today.beginning_of_week(:sunday) ? 'disabled' : nil) do
            %span.glyphicon.glyphicon-calendar

        = succeed ' ' do
          = link_to calendar_project_path(@project, date: move_forward.strftime('%Y%m%d')), tabindex: '-1', class: 'btn btn-xs btn-default' do
            %span.glyphicon.glyphicon-chevron-right

      %h1.page-heading
        = render 'layouts/side_nav_header_button'
        = @title

.dashboard-container
  .calendar
    .calendar-week.calendar-header
      .calendar-day.sunday
        S

      .calendar-day
        M

      .calendar-day
        T

      .calendar-day
        W

      .calendar-day
        R

      .calendar-day
        F

      .calendar-day.saturday
        S

    - stacked_windows = []
    - added_task_counter = -1
    -# end_windows = current_user.all_viewable_tasks.where(project_id: @project.id).where('window_start_date < ? and window_end_date >= ?', @anchor_date - 1.week, @anchor_date - 1.week)
    -# end_windows.each_with_index do |end_window, index|
      -# added_task_counter += 1
      -# stacked_windows << [end_window, 'start', colors(added_task_counter)]

    - index = -1
    - (-1..4).each do |week_offset|
      .calendar-week
        - (0..6).each do |day_offset|
          - index += 1
          - current_date = @anchor_date + week_offset.week + day_offset.day
          - dayname = Date::DAYNAMES[current_date.wday]
          .calendar-day{ class: [dayname.downcase, Time.zone.today == current_date ? 'today' : nil] }
            %div
              - if index == 0 || current_date.day == 1
                - date_format = current_date.strftime '%b %e'
              - else
                - date_format = current_date.strftime '%e'
              = date_format
            - stacked_windows.collect! do |stacked_window, state, color|
              - if stacked_window.window_end_date < current_date
                - [stacked_window, 'cleared', '#ededed']
              - elsif stacked_window.window_end_date == current_date
                - [stacked_window, 'end', color]
              - else
                - [stacked_window, 'middle', color]
            - stacked_windows.reject! { |stacked_window, state, _color| state == 'cleared' } if day_offset == 0

            - start_windows = current_user.all_viewable_tasks.where(project_id: @project.id, window_start_date: current_date)
            - start_windows.each do |start_window|
              - added = false
              - added_task_counter += 1
              - stacked_windows.each_with_index do |(stacked_window, state, color), index|
                - if state == 'cleared'
                  - stacked_windows[index] = [start_window, 'start', colors(added_task_counter)]
                  - added = true
                  - break
              - stacked_windows << [start_window, 'start', colors(added_task_counter)] unless added

            - stacked_windows.each_with_index do |(stacked_window, state, color), index|
              .calendar-window{ class: "window-#{state}", style: "background-color: #{color};", data: { object: 'calendar-window', task_id: stacked_window.id } }
                - if state == 'start'
                  =# stacked_window.id
                  =# state
                  =# stacked_window.calendar_description
                  Window Start
                - elsif state == 'end'
                  Window End
                - elsif state == 'cleared'
                  &nbsp;
                  =# stacked_window.id
                  =# state
                - else
                  &nbsp;
                  =# stacked_window.id
                  =# state

            - tasks = current_user.all_viewable_tasks.where(project_id: @project.id, due_date: current_date)
            - randomizations = current_user.all_viewable_randomizations.where(project_id: @project.id).where('DATE(randomized_at) = ?', current_date)
            - adverse_events = current_user.all_viewable_adverse_events.where(project_id: @project.id, adverse_event_date: current_date)
            - objects = (tasks.to_a + randomizations.to_a + adverse_events.to_a).sort_by(&:created_at)
            - if objects.count > 0
              %ul.list-unstyled
                - objects.each do |object|
                  - if object.is_a?(Task)
                    - task = object
                    - display_text = task.calendar_description
                    %li.nowrap
                      %span.glyphicon.glyphicon-earphone
                      = link_to [@project, task], data: { object: 'calendar-window-hover', task_id: task.id } do
                        = display_text
                  - elsif object.is_a?(Randomization)
                    - randomization = object
                    - display_text = "#{randomization.subject.name} #{randomization.treatment_arm.short_name}"
                    %li.nowrap
                      %span.glyphicon.glyphicon-random
                      = link_to [@project, randomization] do
                        = display_text
                  - elsif object.is_a?(AdverseEvent)
                    - adverse_event = object
                    - display_text = "#{adverse_event.subject.name} #{adverse_event.name}"
                    %li.nowrap
                      %span.glyphicon.glyphicon-warning-sign.text-danger
                      = link_to [@project, adverse_event] do
                        = display_text
