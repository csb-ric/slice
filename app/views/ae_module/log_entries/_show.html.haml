- display_classes = []
- display_classes << "mt-3" if last_time.present? && (last_user != log_entry.user || log_entry.created_at - last_time > 5.minutes)

%div{ class: display_classes }
  - if last_time.nil? || last_user != log_entry.user || log_entry.created_at - last_time > 5.minutes || log_entry.entry_type.in?(%w(ae_reopened))
    %strong= log_entry.user.full_name
    %small.text-muted= log_entry.created_at.strftime("%-l:%M%P")
  - elsif false
    %span.text-muted= log_entry.created_at.strftime("(%-l:%M%P)")

  %div
    - case log_entry.entry_type when "ae_opened"
      Reported
      adverse event for
      = succeed "." do
        = log_entry.ae_adverse_event.subject.subject_code
    - when "ae_sheet_created"
      Created
      = succeed "." do
        = log_entry.sheets.includes(:design).pluck("designs.name").to_sentence
    - when "ae_sent_for_review"
      Sent adverse event for review.
    - when "ae_info_request_created"
      Requested
      - info_request = log_entry.info_requests.first
      - if info_request
        %span.border-bottom.border-dark{ style: "border-bottom-style: dotted !important;", data: { toggle: "tooltip", title: info_request.comment, container: "body", placement: "top" } } additional information
      - else
        %span.badge.badge-light deleted
      from
      - if log_entry.ae_review_team
        admins.
      - else
        reporters.
    - when "ae_info_request_resolved"
      Resolved
      = succeed "." do
        - info_request = log_entry.info_requests.first
        - if info_request
          %span.border-bottom.border-dark{ style: "border-bottom-style: dotted !important;", data: { toggle: "tooltip", title: info_request.comment, container: "body", placement: "top" } }<
            = "request from #{log_entry.info_requests.first.user.nickname}"
        - else
          %span.badge.badge-light deleted
          request
    - when "ae_team_assigned"
      Assigned adverse event to
      = succeed "." do
        = log_entry.ae_review_team.name
    - when "ae_reviewers_assigned"
      = succeed "." do
        Assigned
        = "review".pluralize(log_entry.reviewer_assignments.count)
        - if log_entry.reviewer_assignments.present?
          to
          = log_entry.reviewer_assignments.collect { |assignment| assignment.reviewer.nickname }.to_sentence
    - when "ae_review_completed"
      Completed adverse event review.
    - when "ae_final_review_completed"
      Submitted final adverse event review.
    - when "ae_closed"
      Closed adverse event for
      = succeed "." do
        = log_entry.ae_adverse_event.subject.subject_code
    - when "ae_reopened"
      Reopened adverse event for
      = succeed "." do
        = log_entry.ae_adverse_event.subject.subject_code
    - when "ae_document_uploaded"
      Attached
      = log_entry.documents.collect { |document| link_to(document.filename, ae_module_document_path(document.project, document.ae_adverse_event, document)) }.to_sentence.html_safe
      = succeed "." do
        = "supporting document".pluralize(log_entry.documents.count)
    - when "ae_document_removed"
      Removed supporting documents.
    - else
      = succeed "." do
        %code.text-primary.bg-light= log_entry.entry_type
