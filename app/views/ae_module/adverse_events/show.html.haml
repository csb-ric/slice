- @title = @adverse_event.name

- content_for :header do
  = @title
  %small= link_to_if (@adverse_event.open? && !@adverse_event.sent_for_review?), @adverse_event.description, edit_ae_module_adverse_event_path(@project, @adverse_event), style: "color: inherit;"
= render "ae_module/adverse_events/tabs", project: @project, adverse_event: @adverse_event
- content_for :breadcrumbs do
  %ol
    %li= link_to "adverse events", ae_module_adverse_events_path(@project)
    %li= link_to @subject.name.downcase, [@project, @subject]
    %li.breadcrumb-muted= @adverse_event.name.downcase

.aer-container
  .aer-body
    - designments = @project.ae_designments.where(role: "reporter").order(Arel.sql("position nulls last"))
    - if designments.present?
      %p
        %strong Forms
      - designments.each do |designment|
        - sheets = @adverse_event.sheets.where(design: designment.design)
        - if sheets.present?
          - sheets.each do |sheet|
            .mb-3
              = render "sheets/coverage", sheet: sheet
              = link_to sheet.name, ae_module_sheet_path(@project, @adverse_event, sheet)
        - else
          .mb-3
            %span.badge.badge-coverage.coverage-0 0%
            = link_to designment.design.name, ae_module_reporters_form_path(@project, @adverse_event, designment.design)

    - admin_ae_sheets = @adverse_event.ae_sheets.where(role: "admin").includes(:sheet)

    - if designments.blank? && admin_ae_sheets.present?
      %p
        %strong Forms

    - admin_ae_sheets.each do |ae_sheet|
      .mb-3
        = render "sheets/coverage", sheet: ae_sheet.sheet
        = link_to ae_sheet.sheet.name, ae_module_sheet_path(@project, @adverse_event, ae_sheet.sheet)

    %p
      %strong Documents
    .mb-3
      - documents = @adverse_event.ae_documents.order(created_at: :desc).limit(10)
      - if documents.present?
        - if @adverse_event.ae_documents.count > 10
          %p
            Showing most recent
            %strong 10
            documents.

            = link_to ae_module_documents_path(@project, @adverse_event) do
              View all documents
              = icon("fas", "caret-right")
        - documents.each do |document|
          .mb-3
            = render "ae_module/documents/icon", document: document
            - if document.pdf? || document.image?
              = link_to document.filename, ae_module_document_path(@project, @adverse_event, document)
            - else
              = link_to document.filename, download_ae_module_document_path(@project, @adverse_event, document), data: { turbolinks: false }
      - else
        = link_to ae_module_documents_path(@project, @adverse_event) do
          = icon("fas", "paperclip")
          Attach supporting documents
          = icon("fas", "caret-right")

    %p
      %strong Information requests

    - if @project.ae_admin?(current_user)
      - info_requests = @adverse_event.ae_info_requests
    - elsif @project.ae_reporter?(current_user)
      - info_requests = @adverse_event.ae_info_requests.where(ae_review_team_id: nil)
    - else
      - info_requests = AeInfoRequest.none

    - if info_requests.present?
      - info_requests.order("resolved_at desc NULLS FIRST, created_at").each do |info_request|
        = render "ae_module/info_requests/show", project: @project, adverse_event: @adverse_event, info_request: info_request
    - else
      .mb-3.text-muted No requests.

  .aer-footer
    - if @adverse_event.closed?
      %div
        %span.text-primary= icon("fas", "lock")
        Adverse event closed.
        = link_to "Reopen?", ae_module_admins_reopen_adverse_event_path(@project, @adverse_event), method: :post, class: "text-danger", data: { confirm: "Reopen adverse event?" } if @project.ae_admin?(current_user)
    - else
      - if @adverse_event.sent_for_review?
        - if @project.ae_admin?(current_user)
          .mb-3
            %span.text-primary= icon("fas", "check-square")
            Ready for review!
        - else
          %div
            %span.text-primary= icon("fas", "check-square")
            Sent for review!

      - design = @adverse_event.next_design_to_complete("reporter")
      - if design
        .mb-3
          %span.text-primary= icon("far", "copy")
          = link_to ae_module_reporters_form_path(@project, @adverse_event, design) do
            - if @project.ae_designs("reporter").count == 1
              Enter
              = design.name
            - else
              Enter forms
            = icon("fas", "caret-right")
          .small Provide information about the adverse event.

      - unless @adverse_event.sent_for_review?
        %div{ class: @project.ae_admin?(current_user) ? "mb-3" : nil }
          - if design.present? || @adverse_event.ae_info_requests.where(ae_review_team_id: nil, resolved_at: nil).present?
            %span.text-muted= icon("fas", "paper-plane")
            = link_to "#", disabled: true, class: "text-muted", data: { object: "suppress-click" } do
              Send for admin review
              = icon("fas", "caret-right")
            .small
              - if design.present? && @adverse_event.ae_info_requests.where(ae_review_team_id: nil, resolved_at: nil).present?
                Enter all forms and resolve all information request before sending for review.
              - elsif design.present?
                Enter all forms before sending for review.
              - else
                Resolve all information requests before sending for review.
          - else
            %span.text-primary= icon("fas", "paper-plane")
            = link_to ae_module_reporters_send_for_review_path(@project, @adverse_event), method: :post do
              Send for admin review
              = icon("fas", "caret-right")
            .small
              - if @project.ae_designs("reporter").count.positive? && @adverse_event.ae_info_requests.where(ae_review_team_id: nil).present?
                All forms entered and info requests resolved.
              - elsif @adverse_event.ae_info_requests.where(ae_review_team_id: nil).present?
                All info requests resolved.
              - elsif @project.ae_designs("reporter").count.positive?
                All forms entered.
              - else
                Ready to send for review.

      - if @project.ae_admin?(current_user)
        .mb-3
          %strong Administrative

        .mb-3
          %span.text-primary= icon("fas", "question-circle")
          = link_to new_ae_module_info_request_path(@project, @adverse_event) do
            Request information
            = icon("fas", "caret-right")
          .small Have questions? Get answers!

      - if @project.ae_admin?(current_user)
        .mb-3
          %span{ class: @adverse_event.sent_for_review? ? "text-primary" : "text-muted" }= icon("fas", "paper-plane")
          = link_to "#", data: { toggle: "dropdown" }, class: @adverse_event.sent_for_review? ? nil : "text-muted" do
            Send to team
            = icon("fas", "caret-right")
          .dropdown-menu
            - @project.ae_review_teams.each do |team|
              = link_to team.name, ae_module_admins_assign_team_path(@project, @adverse_event, review_team_id: team), method: :post, class: "dropdown-item", data: { confirm: @adverse_event.sent_for_review? ? nil : "Adverse event has not yet been sent for review. Assign team anyways?" }
          .small Assign a team to adverse event.

      - if @project.ae_admin?(current_user)
        - design = @project.first_design("admin")
        - if design
          .mb-3
            %span{ class: @adverse_event.sent_for_review? ? "text-primary" : "text-muted" }= icon("far", "copy")
            = link_to ae_module_admins_form_path(@project, @adverse_event, design), class: @adverse_event.sent_for_review? ? nil : "text-muted" do
              Enter administrative forms
              = icon("fas", "caret-right")
            .small Provide information about the adverse event.

      - if @project.ae_admin?(current_user)
        %div
          %span.text-danger= icon("fas", "lock")
          = link_to ae_module_admins_close_adverse_event_path(@project, @adverse_event), method: :post, class: "text-danger" do
            Close adverse event
            = icon("fas", "caret-right")
          .small Mark the adverse event as closed.
