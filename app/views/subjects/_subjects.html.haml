- if @subjects.count == 0
  .jumbotron
    %p.center
      No subjects found.
      - if params[:search].present?
        - if (params[:site_id].present? || @tokens.select { |t| t.key == 'adverse-events' }.present? || @tokens.select { |t| t.key == 'randomized' }.present?)
          - search = @tokens.select { |t| t.key == 'search' }.collect(&:to_s).join(' ')
          = link_to 'Clear filters.', project_subjects_path(@project, search: search.present? ? search : nil)
        - elsif params[:search].to_s.squish.tr(':', '').size == params[:search].to_s.size
          = link_to "Create subject #{params[:search]}.", choose_site_project_subjects_path(subject_code: params[:search])
- else
  .dashboard-container
    - viewable_sites = current_user.all_viewable_sites.where(project_id: @project.id)
    %table.table.table-striped.table-borderless.table-hover
      %col
      - if viewable_sites.count > 1
        %col.hidden-xs.hidden-sm
      %col
      - if @project.randomizations_enabled? && @project.unblinded?(current_user)
        %col.hidden-xs
      - if @project.adverse_events_enabled? && @project.unblinded?(current_user)
        %col.hidden-xs
      %thead
        %tr
          - filtered_params = params.permit(:site_id, :search)
          = th_sort_field @order, 'subjects.subject_code', @project.subject_code_name_full, permit: [:site_id]
          - if viewable_sites.count > 1
            %th.hidden-xs.hidden-sm.nowrap{ class: ['subjects.site_id', 'subjects.site_id desc'].include?(params[:order]) ? 'sort-selected' : nil }
              = link_to 'Site', project_subjects_path(@project, filtered_params.merge(order: (params[:order] == 'subjects.site_id desc' ? 'subjects.site_id' : 'subjects.site_id desc')))
              .dropdown{ style: 'display: inline-block' }
                = link_to '#', data: { target: '#', toggle: 'dropdown' }, role: 'button', aria: { haspopup: 'true', expanded: 'false' }, id: 'status-dropdown' do
                  %span.glyphicon.glyphicon-filter
                %ul.dropdown-menu{ aria: { labelledby: 'status-dropdown' } }
                  %li= link_to 'All Sites', project_subjects_path(@project, filtered_params.merge(order: params[:order], site_id: nil)), style: params[:site_id].blank? ? 'font-weight:bold;' : ''
                  - viewable_sites.order(:name).each do |site|
                    %li= link_to site.short_name, project_subjects_path(@project, filtered_params.merge(order: params[:order], site_id: site.id)), style: params[:site_id].to_s == site.id.to_s ? 'font-weight:bold;' : ''
          %th.nowrap Recent Activity
          - if @project.randomizations_enabled? && @project.unblinded?(current_user)
            %th.hidden-xs.center
              Randomized
              .dropdown{ style: 'display: inline-block' }
                = link_to '#', data: { target: '#', toggle: 'dropdown' }, role: 'button', aria: { haspopup: 'true', expanded: 'false' }, id: 'randomized-dropdown' do
                  %span.glyphicon.glyphicon-filter
                %ul.dropdown-menu.dropdown-menu-right{ aria: { labelledby: 'randomized-dropdown' } }
                  %li= link_to 'All', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: @tokens.reject { |t| t.key == 'randomized' }.collect(&:to_s).join(' '))), style: @tokens.select { |t| t.key == 'randomized' }.blank? ? 'font-weight:bold;' : ''
                  %li= link_to 'Randomized', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == 'randomized' }.collect(&:to_s) + ['is:randomized']).join(' '))), style: @tokens.select { |t| t.key == 'randomized' && t.operator == '=' }.present? ? 'font-weight:bold;' : ''
                  %li= link_to 'Unrandomized', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == 'randomized' }.collect(&:to_s) + ['not:randomized']).join(' '))), style: @tokens.select { |t| t.key == 'randomized' && t.operator == '!=' }.present? ? 'font-weight:bold;' : ''
          - if @project.adverse_events_enabled? && @project.unblinded?(current_user)
            %th.hidden-xs
              AEs
              .dropdown{ style: 'display: inline-block' }
                = link_to '#', data: { target: '#', toggle: 'dropdown' }, role: 'button', aria: { haspopup: 'true', expanded: 'false' }, id: 'ae-dropdown' do
                  %span.glyphicon.glyphicon-filter
                %ul.dropdown-menu.dropdown-menu-right{ aria: { labelledby: 'ae-dropdown' } }
                  %li= link_to 'All', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: @tokens.reject { |t| t.key == 'adverse-events' }.collect(&:to_s).join(' '))), style: @tokens.select { |t| t.key == 'adverse-events' }.blank? ? 'font-weight:bold;' : ''
                  %li= link_to 'Open', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == 'adverse-events' }.collect(&:to_s) + ['adverse-events:open']).join(' '))), style: @tokens.select { |t| t.key == 'adverse-events' && t.value == 'open' }.present? ? 'font-weight:bold;' : ''
                  %li= link_to 'Closed', project_subjects_path(@project, filtered_params.merge(order: params[:order], search: (@tokens.reject { |t| t.key == 'adverse-events' }.collect(&:to_s) + ['adverse-events:closed']).join(' '))), style: @tokens.select { |t| t.key == 'adverse-events' && t.value == 'closed' }.present? ? 'font-weight:bold;' : ''

      - @subjects.each do |subject|
        %tr{ id: "subject_#{subject.id}" }
          %td= link_to subject.subject_code, [@project, subject]
          - if viewable_sites.count > 1
            %td.hidden-xs.hidden-sm= subject.site.short_name
          %td
            - sheet = subject.last_created_or_edited_sheet(current_user)
            - subject_event = subject.blinded_subject_events(current_user).order(updated_at: :desc).first
            - if sheet && subject_event
              - if (sheet.last_edited_at && sheet.last_edited_at > subject_event.updated_at) || (sheet.last_edited_at.nil? && sheet.created_at > subject_event.updated_at)
                = link_to sheet.name, [@project, sheet]
              - else
                = link_to event_project_subject_path(@project, subject, event_id: subject_event.event, subject_event_id: subject_event.id, event_date: subject_event.event_date_to_param) do
                  = subject_event.name
            - elsif sheet
              = link_to sheet.name, [@project, sheet]
            - elsif subject_event
              = link_to event_project_subject_path(@project, subject, event_id: subject_event.event, subject_event_id: subject_event.id, event_date: subject_event.event_date_to_param) do
                = subject_event.name
            - else
              %span.text-muted Subject Created
          - if @project.randomizations_enabled? && @project.unblinded?(current_user)
            %td.hidden-xs.center
              - if subject.randomizations.count > 0
                = simple_check true
              - else
                %span.text-muted -
          - if @project.adverse_events_enabled? && @project.unblinded?(current_user)
            %td.hidden-xs.nowrap
              - open_ae_count = subject.adverse_events.where(closed: false).count
              - closed_ae_count = subject.adverse_events.where(closed: true).count
              - if open_ae_count + closed_ae_count > 0
                - if open_ae_count > 0
                  = link_to adverse_events_project_subject_path(@project, subject), class: 'btn btn-success btn-xs' do
                    = open_ae_count
                    Open
                  &nbsp;
                - if closed_ae_count > 0
                  = link_to adverse_events_project_subject_path(@project, subject), class: 'btn btn-danger btn-xs' do
                    = closed_ae_count
                    Closed
              - else
                %span.text-muted -

  .center
    = paginate @subjects, theme: 'bootstrap'
